{"ast":null,"code":"import { ENV } from \"../utils\";\nexport class Auth {\n  constructor() {\n    this.baseApi = ENV.BASE_API;\n  }\n  async register(data) {\n    try {\n      const url = `${this.baseApi}/${ENV.API_ROUTES.REGISTER}`;\n      const params = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email: data.email,\n          password: data.password\n        })\n      };\n      const response = await fetch(url, params);\n      const result = await response.json();\n      if (response.status !== 200) {\n        throw result;\n      }\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async login(data) {\n    try {\n      const url = `${this.baseApi}/${ENV.API_ROUTES.LOGIN}`;\n      const params = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      };\n      const response = await fetch(url, params);\n      const result = await response.json();\n      if (response.status !== 200) {\n        throw result;\n      }\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  }\n  async refreshAccesToken(refreshToken) {\n    try {\n      const url = `${this.baseApi}/${ENV.API_ROUTES.REFRESH_ACCES_TOKEN}`;\n      const params = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          token: refreshToken\n        })\n      };\n      const response = await fetch(url, params);\n      const result_ = await response.json();\n      const {\n        msg: result\n      } = result_;\n      if (response.status !== 200) throw result;\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  }\n  setAccessToken(token) {\n    localStorage.setItem(ENV.JWT.ACCESS, token);\n  }\n  getAccessToken() {\n    return localStorage.getItem(ENV.JWT.ACCESS);\n  }\n  setRefreshToken(token) {\n    localStorage.setItem(ENV.JWT.REFRESH, token);\n  }\n  getRefreshToken() {\n    return localStorage.getItem(ENV.JWT.REFRESH);\n  }\n  removeTokens() {\n    localStorage.removeItem(ENV.JWT.ACCESS);\n    localStorage.removeItem(ENV.JWT.REFRESH);\n  }\n}","map":{"version":3,"names":["ENV","Auth","baseApi","BASE_API","register","data","url","API_ROUTES","REGISTER","params","method","headers","body","JSON","stringify","email","password","response","fetch","result","json","status","error","login","LOGIN","refreshAccesToken","refreshToken","REFRESH_ACCES_TOKEN","token","result_","msg","setAccessToken","localStorage","setItem","JWT","ACCESS","getAccessToken","getItem","setRefreshToken","REFRESH","getRefreshToken","removeTokens","removeItem"],"sources":["/home/luis/Escritorio/React/MERN/client/src/api/auth.js"],"sourcesContent":["import { ENV } from \"../utils\";\n\nexport class Auth {\n    baseApi = ENV.BASE_API;\n\n    async register(data) {\n        try {\n            const url = `${this.baseApi}/${ENV.API_ROUTES.REGISTER}`;\n            const params = {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    email: data.email,\n                    password: data.password,\n                })\n            };\n\n            const response = await fetch(url, params);\n            const result = await response.json();\n            if (response.status !== 200) { throw result; }\n            return result;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    async login(data) {\n        try {\n            const url = `${this.baseApi}/${ENV.API_ROUTES.LOGIN}`;\n            const params = {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify( data )\n            };\n\n            const response = await fetch(url, params);\n            \n            const result = await response.json();\n            if (response.status !== 200) { throw result; }\n            return result;\n        } catch (error) {\n            throw error\n        }\n    }\n\n    async refreshAccesToken(refreshToken) {\n        try {\n            const url = `${this.baseApi}/${ENV.API_ROUTES.REFRESH_ACCES_TOKEN}`;\n            const params = {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    token: refreshToken,\n                }),\n            };\n\n            const response = await fetch(url, params);\n            const result_ = await response.json();\n            const { msg: result } = result_;\n\n            if (response.status !== 200) throw result;\n\n            return result\n         } catch (error) {\n            throw error;\n        }\n    }\n\n    setAccessToken(token) {\n        localStorage.setItem( ENV.JWT.ACCESS, token )\n    }\n\n    getAccessToken() {\n        return localStorage.getItem(ENV.JWT.ACCESS)\n    }\n\n    setRefreshToken(token) {\n        localStorage.setItem( ENV.JWT.REFRESH, token )\n    }\n\n    getRefreshToken() {\n        return localStorage.getItem(ENV.JWT.REFRESH)\n    }\n\n    removeTokens() {\n        localStorage.removeItem(ENV.JWT.ACCESS)\n        localStorage.removeItem(ENV.JWT.REFRESH)\n    }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}